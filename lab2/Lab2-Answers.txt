1. Read the RTX Library Reference in the Keil IDE Help (see 1.12) and answer the following questions:
1.1 (1 point) In an RTX application, how to declare a memory pool named "mympool" that has 20 blocks 
    of memory with block size of 12 bytes?
-----------------------------------------------------------------------------------------------------
_declare_box (mypool, 12, 20)

1.2 (1 point) Write one line of code to initialize the "mympool".
-----------------------------------------------------------------------------------------------------
- _init_box(mympool, sizeof(mympool), 12);

1.3 (1 point) What is the corresponding kernel function of _alloc_box()?
-----------------------------------------------------------------------------------------------------
- rt_alloc_box ();

1.4 (1 point) What is the corresponding kernel function of _free_box()?
-----------------------------------------------------------------------------------------------------
- rt_free_box();

2. (2 points) Read the rt_TypeDef.h file. What is the purpose of ret_val in the struct OS_TCB?
-----------------------------------------------------------------------------------------------------
- returns on completion of a wait call to notify us when a task can stop waiting

3. Read the rt_List.c file and answer the following questions:
    You may want to further explore other functions in the rt_List.c file.
3.1 (2 points) What does the rt_put_prio() function do?
-----------------------------------------------------------------------------------------------------
- Puts a task onto a priority queue based on task priorities.

3.2 (2 points) What does the rt_get_first() function do?
-----------------------------------------------------------------------------------------------------
- Gets the first/highest priority task off the priority queue

4. Read the rt_Task.c file and answer the following questions:
4.1 (2 points) What does the rt_block() function do?
-----------------------------------------------------------------------------------------------------
- changes the TCB state to WAIT_MEM essentially blocking the current task and preparing the next one.

4.2 (2 points) What does the rt_dispatch() function do?
-----------------------------------------------------------------------------------------------------
- dispatches the next task to run which would be the task with the highest priority in the priority queue

5. (4 points) How to set the return value of a function becomes a bit tricky when context
    switching is involved. One such example is os_mbx_wait() function. This function
    will return OS_R_MBX if the task has waited until a message was put in the mailbox
    (i.e. the task was blocked to wait for a message to arrive and then unblocked when
    the message arrives). Read the rt_Mailbox.c file and find the lines where the return
    value of OS_R_MBX is set. 
    Why does the corresponding kernel function rt_mbx_wait()
    not have a line to set the return value to OS_R_MBX? You may skip the code in
    functions isr_mbx_receive() and rt_mbx_psh() for the purpose of completing this
    assignment.
-----------------------------------------------------------------------------------------------------
-Line 54: p_TCB->ret_val = OS_R_MBX;

- The mailbox is used for communication purposes solely and it is up to the tasks themselves and the memory
Allocation functions we have created to set the return values of the task that has been dispatched after waiting
	
	The wait function only blocks tasks that have no messages to receive and this does not check if the task is able to send the message. 

6. (2 points) To block a task, you will need to create a queue that the blocked tasks
    can stay. There are two global queues for now in the kernel and they are os_rdy and
    os_dly. What data structure do these two queues use?
-----------------------------------------------------------------------------------------------------
- They use a doubly linked list

