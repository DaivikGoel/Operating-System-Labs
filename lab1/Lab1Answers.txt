1. (1 point) Which global variable has the os_active_TCB array length information
- OS_TASKCNT

2. (1 point) What does os_active_TCB array in RTX_lib.c contain
- Contains an array of pointers to active tasks

3. (1 point) Which global variable has the os idle task TCB information
- os_idle_TCB

4. (1 point) Is the TCB of the os idle task an element in the os_active_TCB
- No

5. (1 point) Read rt_get_TID() code in rt_Task.c file. Assume that a non-idle task has a task ID of n, what is the index of this task’s TCB in the os_active_TCB array
- n-1

6. Read the rt_TypeDef.h file and answer the following questions.
6.1 (1 point) What is the purpose of the p_lnk variable in the struct OS_TCB
- It is a pointer to the waiting list for tasks.

6.2 (1 point) What is the purpose of tsk_stack and stack variables in struct OS_TCB
- The tsk_stack variable is a pointer to the current task in the stack and the stack variables are pointers to find the location of the stack in memory.

6.3 (1 point) If you have a variable with type of struct OS_XCB , will casting this variable to struct OS_TCB  keep the p_lnk field
- Yes it should keep the p_Ink field because both are defined in each respective struct

7. Read the rt_Task.c and RTX_lib.c files and answer the following question.
7.1 (2 points) What is the purpose of variables mp_tcb and mp_stk
     You may want to search the entire source code to further explore how these variables are set and used (see Figure 1.28).
- The mp_tcb variable is a pointer to the memory pool where TCB variables are stored.
- The mp_stk variable is a pointer to the memory pool where the system stack is allocated

8. Read Section C.2.3 and study rt_init_stack() and rt_get_PSP() functions source code in HAL_CM3.c file and answer the following questions.
8.1 (2 points) Which registers are saved on the task stack
- The default PSR (R15), initial PC(R14)  and PSP (R13)

8.2 (2 points) Which bits of which global variable contain the default task stack size in bytes
- In the 16 least significant bits of the global variable os_stackinfo

8.3 (2 points) How to determine the memory address of the first item that is pushed onto a task stack
- P_TCB -> tsk_stack;

8.4 (2 points) For a task that is not in RUNNING state, how to determine the memory address of the last item that is pushed onto its task stack (i.e. the top of the stack)
 -P_TCB->stack

8.5 (2 points) For a task that is in RUNNING state, how to determine the memory address of the last item that is pushed onto its task stack (i.e. the top of the stack)
- rt_get_PSP()